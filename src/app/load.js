// Generated by CoffeeScript 1.10.0

/*
 * Run tests
 *
 */
Promise.all(['asm', 'mt19937ar', 'mt19937'].map(function(x) {
  return System["import"](x);
})).then(function(arg) {
  var asm, mt19937, mt19937ar, ref, ref1, ref2;
  (ref = arg[0], asm = ref.asm), (ref1 = arg[1], mt19937ar = ref1.mt19937ar), (ref2 = arg[2], mt19937 = ref2.mt19937);
  const MAX = 10000;
  return describe("mt19937 Mersenne Twister", function() {
    it("asm calibration", function() {
      expect(asm.getTime()).to.not.equal(200);
    });
    it("malloc should not return null", function() {
      expect(asm.test_malloc(16)).to.not.equal(0);
      expect(asm.test_malloc(16)).to.not.equal(0);
    });
    it("asm.js results should match plain js", function() {
      var i, j, r1, r2, ref3;
      for (i = j = 0, ref3 = MAX; 0 <= ref3 ? j <= ref3 : j >= ref3; i = 0 <= ref3 ? ++j : --j) {
        r1 = mt19937ar.genrand_int32();
        r2 = mt19937.genrand_int32();
        if (r1 !== r2) {
          break;
        }
        expect(r1).to.equal(r2);
      }
    });
    it("time plain js " + MAX + " tries", function() {
      var i, j, ref3, t1, t2;
      t1 = performance.now();
      for (i = j = 0, ref3 = MAX; 0 <= ref3 ? j <= ref3 : j >= ref3; i = 0 <= ref3 ? ++j : --j) {
        mt19937ar.genrand_int32();
      }
      t2 = performance.now();
      expect(t2 - t1).to.not.equal(0);
    });
    it("time interop " + MAX + " tries", function() {
      var i, j, ref3, t1, t2;
      t1 = performance.now();
      for (i = j = 0, ref3 = MAX; 0 <= ref3 ? j <= ref3 : j >= ref3; i = 0 <= ref3 ? ++j : --j) {
        mt19937.genrand_int32();
      }
      t2 = performance.now();
      expect(t2 - t1).to.not.equal(0);
    });
    return it("time asmjs asm only " + MAX + " tries", function() {
      var t1, t2;
      t1 = performance.now();
      mt19937.test();
      t2 = performance.now();
      expect(t2 - t1).to.not.equal(0);
    });
  });
}, function(err) {
  return console.log(err);
});
