// Generated by CoffeeScript 1.10.0

/*
 * main entry point
 *
 */
Promise.all(['asm', 'mt19937ar', 'mt19937'].map(function(x) {
  return System["import"](x);
})).then(function(arg) {
  var MAX, asm, mt19937, mt19937ar, ref, ref1, ref2, testResults;
  (ref = arg[0], asm = ref.asm), (ref1 = arg[1], mt19937ar = ref1.mt19937ar), (ref2 = arg[2], mt19937 = ref2.mt19937);
  MAX = 10000;
  testResults = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0]];
  QUnit.test("asm calibration", function(assert) {
    var elapsed;
    elapsed = asm.getTime();
    return assert.ok(elapsed < 200, "elapsed < 200");
  });
  QUnit.test("malloc", function(assert) {
    var m1, m2;
    m1 = asm.test_malloc(16);
    m2 = asm.test_malloc(16);
    assert.ok(m1 !== 0, "passed " + m1);
    return assert.ok(m2 !== 0, "passed " + m2);
  });
  QUnit.test("mt19937 Same Results?", function(assert) {
    testResults[0][0] = mt19937ar.genrand_int32();
    testResults[0][1] = mt19937ar.genrand_int32();
    testResults[0][2] = mt19937ar.genrand_int32();
    testResults[0][3] = mt19937ar.genrand_int32();
    testResults[0][4] = mt19937ar.genrand_int32();
    testResults[1][0] = mt19937.genrand_int32();
    testResults[1][1] = mt19937.genrand_int32();
    testResults[1][2] = mt19937.genrand_int32();
    testResults[1][3] = mt19937.genrand_int32();
    testResults[1][4] = mt19937.genrand_int32();
    assert.ok(testResults[0][0] === testResults[1][0], "[0] Passed!");
    assert.ok(testResults[0][1] === testResults[1][1], "[1] Passed!");
    assert.ok(testResults[0][2] === testResults[1][2], "[2] Passed!");
    assert.ok(testResults[0][3] === testResults[1][3], "[3] Passed!");
    assert.ok(testResults[0][4] === testResults[1][4], "[4] Passed!");
  });
  QUnit.test("mt19937ar " + MAX + " tries", function(assert) {
    var i, j, ref3, t1, t2;
    t1 = performance.now();
    for (i = j = 0, ref3 = MAX; 0 <= ref3 ? j <= ref3 : j >= ref3; i = 0 <= ref3 ? ++j : --j) {
      mt19937ar.genrand_int32();
    }
    t2 = performance.now();
    assert.ok(t2 > t1, "passed");
  });
  QUnit.test("mt19937.asmjs interop " + MAX + " tries", function(assert) {
    var i, j, ref3, t1, t2;
    t1 = performance.now();
    for (i = j = 0, ref3 = MAX; 0 <= ref3 ? j <= ref3 : j >= ref3; i = 0 <= ref3 ? ++j : --j) {
      mt19937.genrand_int32();
    }
    t2 = performance.now();
    assert.ok(t2 > t1, "passed");
  });
  return QUnit.test("mt19937.asmjs asm only " + MAX + " tries", function(assert) {
    var t1, t2;
    t1 = performance.now();
    mt19937.test();
    t2 = performance.now();
    assert.ok(t2 > t1, "passed");
  });
}, function(err) {
  return console.log(err);
});
