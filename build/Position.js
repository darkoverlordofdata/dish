/** generated by dish 0.0.1 */
import Ffi from 'ffi'
import {buffer} from 'ffi'
import Stdlib from 'stdlib'
export const Position = (function(stdlib, foreign, heap) {
"use asm";
var HEAPF64 = new stdlib.Float64Array(heap);
function Position(self, x, y) {
    self = self | 0;
    x = +x;
    y = +y;
    var __01__ = 0, __02__ = 0;
    __01__ = self + 0;
    HEAPF64[__01__ >> 3] = x;
    __02__ = self + 8;
    HEAPF64[__02__ >> 3] = y;
}
function getX(self) {
    self = self | 0;
    var __00__ = 0.0, __01__ = 0;
    var x = 0.0;
    __01__ = +(self + 0);
    x = +HEAPF64[__01__ >> 3];
    __00__ = x;
    return +__00__;
}
function setX(self, x) {
    self = self | 0;
    x = +x;
    var __01__ = 0;
    __01__ = self + 0;
    HEAPF64[__01__ >> 3] = x;
}
function getY(self) {
    self = self | 0;
    var __00__ = 0.0, __01__ = 0;
    var y = 0.0;
    __01__ = +(self + 8);
    y = +HEAPF64[__01__ >> 3];
    __00__ = y;
    return +__00__;
}
function setY(self, y) {
    self = self | 0;
    y = +y;
    var __01__ = 0;
    __01__ = self + 8;
    HEAPF64[__01__ >> 3] = y;
}    
return { 
    Position:Position,
    getX:getX,
    setX:setX,
    getY:getY,
    setY:setY, 
};
}(Stdlib, Ffi, buffer))
for (let k in Position) { 
    Ffi['Position_'+k] = Position[k] 
}
