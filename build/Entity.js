/** generated by dish 0.0.1 */
import Ffi from 'ffi'
import {buffer} from 'ffi'
import Stdlib from 'stdlib'
export const Entity = (function(stdlib, foreign, heap) {
"use asm";
var HEAPI32 = new stdlib.Int32Array(heap);
var malloc = foreign.malloc;
var free = foreign.free;
function Entity(self, totalComponents) {
    self = self | 0;
    totalComponents = totalComponents | 0;
    HEAPI32[self + 8 >> 2] = totalComponents | 0;
}
function getId(self) {
    self = self | 0;
    return HEAPI32[self + 0 >> 2] | 0;
}
function setId(self, id) {
    self = self | 0;
    id = id | 0;
    HEAPI32[self + 0 >> 2] = id | 0;
}
function getEnabled(self) {
    self = self | 0;
    return HEAPI32[self + 4 >> 2] | 0;
}
function setEnabled(self, enabled) {
    self = self | 0;
    enabled = enabled | 0;
    HEAPI32[self + 4 >> 2] = enabled | 0;
}
function getComponent(self, index) {
    self = self | 0;
    index = index | 0;
    return HEAPI32[self + 12 + (index << 2) >> 2] | 0;
}
function setComponent(self, index, value) {
    self = self | 0;
    index = index | 0;
    value = value | 0;
    HEAPI32[self + 12 + (index << 2) >> 2] = value | 0;
}
function hasComponent(self, index) {
    self = self | 0;
    index = index | 0;
    var comp = 0;
    var retval = 0;
    if ((comp | 0) > (0 | 0)) {
        retval = 1 | 0;
    } else {
        retval = 0 | 0;
    }
    return retval | 0;
}
function ctor(totalComponents) {
    totalComponents = totalComponents | 0;
    var self = 0;
    self = malloc(92 | 0) | 0;
    Entity(self | 0, totalComponents | 0);
    return self | 0;
}    
return { 
    Entity:Entity,
    getId:getId,
    setId:setId,
    getEnabled:getEnabled,
    setEnabled:setEnabled,
    getComponent:getComponent,
    setComponent:setComponent,
    hasComponent:hasComponent,
    ctor:ctor, 
};
}(Stdlib, Ffi, buffer))
for (let k in Entity) { 
    Ffi['Entity_'+k] = Entity[k] 
}
