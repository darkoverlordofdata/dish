// Generated by Dish 0.0.1
import Ffi from 'ffi'
import {buffer} from 'ffi'
import Stdlib from 'stdlib'
export const test2 = (function(stdlib, foreign, heap) {
"use asm";
var HEAPI32 = new stdlib.Int32Array(heap);
var malloc = foreign.malloc;
function index(ptr, i) {
    ptr = ptr | 0;
    i = i | 0;
    var $01 = 0, $02 = 0;
    var value = 0;
    var k = 0;
    var result = 0;
    value = ptr;
    $01 = value + i | 0;
    $02 = $01 << 2 | 0;
    result = HEAPI32[$02 >> 2] | 0;
    return result | 0;
}
function and(s) {
    s = s | 0;
    var $01 = 0, $02 = 0, $03 = 0, $04 = 0, $05 = 0;
    var m = 0;
    var x = 0;
    m = (malloc(10 << 2) | 0) >> 2;
    $01 = m + 0 | 0;
    $02 = $01 << 2 | 0;
    $03 = s & 4294967295 | 0;
    HEAPI32[$02>>2] = $03 | 0;
    $04 = m + 0 | 0;
    $05 = $04 << 2 | 0;
    x = HEAPI32[$05 >> 2] | 0;
    return x | 0;
}
function test() {
    var $00 = 0;
    var zz = 0;
    zz = ~~(20);
    return zz | 0;
}    
return { 
    index:index,
    and:and,
    test:test, 
};
}(Stdlib, Ffi, buffer))
