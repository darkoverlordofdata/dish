// Generated by CoffeeScript 1.10.0

/*
 * Run tests
 */
Promise.all(['entity', 'pool', 'test-twister'].map(function(x) {
  return System["import"](x);
})).then(function(arg) {
  var Entity, MersenneTwister, pool, ref, ref1, ref2;
  (ref = arg[0], Entity = ref.Entity), (ref1 = arg[1], pool = ref1.pool), (ref2 = arg[2], MersenneTwister = ref2.MersenneTwister);
  return describe('MT19937', function() {
    it('Same result', function() {
      var i, k, results;
      results = [];
      for (i = k = 0; k <= 4; i = ++k) {
        results.push(expect(MersenneTwister.genrand_int32()).to.equal(mt19937ar.genrand_int32()));
      }
      return results;
    });
    it('Speed js', function() {
      var i, j, k, l, z;
      for (i = k = 0; k <= 1000; i = ++k) {
        for (j = l = 0; l <= 32767; j = ++l) {
          z = mt19937ar.genrand_int32();
        }
      }
      return expect(0).to.equal(0);
    });
    it('Speed dish', function() {
      MersenneTwister.test(1000, 32767);
      return expect(0).to.equal(0);
    });
    return it('Create entity', function() {
      var MAX, e1, e2, i, k, ref3;
      MAX = 800;
      pool.initialize(10);
      e1 = pool.createEntity();
      expect(Entity.getId(e1)).to.equal(1);
      Entity.setEnabled(e1, 0);
      expect(Entity.getEnabled(e1)).to.equal(0);
      for (i = k = 0, ref3 = MAX; 0 <= ref3 ? k <= ref3 : k >= ref3; i = 0 <= ref3 ? ++k : --k) {
        e2 = pool.createEntity();
      }
      return expect(Entity.getId(e2)).to.equal(MAX + 2);
    });
  });
}, function(err) {
  return console.log(err);
});
