// Generated by Dish 0.0.1
import Ffi from 'ffi'
import {buffer} from 'ffi'
import Stdlib from 'stdlib'
export const MersenneTwister = (function(stdlib, foreign, heap) {
"use asm";
var HEAPI32 = new stdlib.Int32Array(heap);
var malloc = foreign.malloc;
var imul = stdlib.Math.imul;
var N = 624;
var M = 397;
var MATRIX_A = 2567483615;
var UPPER_MASK = 2147483648;
var LOWER_MASK = 2147483647;
var mt = 0;
var mti = 625;
function init_genrand(s) {
    s = s | 0;
    var $01 = 0, $02 = 0, $03 = 0, $04 = 0, $05 = 0, $06 = 0, $07 = 0, $08 = 0, $09 = 0, $10 = 0, $11 = 0, $12 = 0, $16 = 0, $17 = 0;
    var n = 0;
    var t2 = 0;
    var t3 = 0;
    var r1 = 0.0;
    var r3 = 0.0;
    r1 = +1812433253;
    mt = (malloc(N << 2) | 0) >> 2;
    $01 = mt + 0 | 0;
    $02 = $01 << 2;
    $03 = s & 4294967295;
    HEAPI32[$02>>2] = $03 | 0;
    for (mti = 1; mti < N; mti = mti + 1 | 0) {
        $04 = mti - 1 | 0;
        $05 = mt + $04 | 0;
        $06 = $05 << 2;
        $07 = HEAPI32[$06 >> 2] | 0;
        $08 = $07 >> 30;
        $09 = mti - 1 | 0;
        $10 = mt + $09 | 0;
        $11 = $10 << 2;
        $12 = HEAPI32[$11 >> 2] | 0;
        t2 = $12 ^ $08;
        r3 = +(r1 * +(t2));
        t3 = ~~(r3) + mti | 0;
        $16 = mt + mti | 0;
        $17 = $16 << 2;
        HEAPI32[$17>>2] = $17 | 0;
        if (mti < 6) {
            console.log('t2 = ', t2, t3, r3);
        }
    }
    return 0 | 0;
}
function genrand_int32() {
    var $01 = 0, $02 = 0, $03 = 0, $04 = 0, $05 = 0, $06 = 0, $07 = 0, $08 = 0, $09 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $78 = 0, $79 = 0, $81 = 0, $82 = 0, $84 = 0;
    var y = 0;
    var mag01 = 0;
    var kk = 0;
    mag01 = (malloc(2 << 2) | 0) >> 2;
    HEAPI32[(mag01+0)<<2>>2] = 0;
    HEAPI32[(mag01+1)<<2>>2] = MATRIX_A;
    if (mti >= N) {
        if (mti == N + 1) {
            init_genrand(5489);
        }
        for (kk = 0; (kk | 0) < N - M; kk = kk + 1 | 0) {
            $01 = kk + 1 | 0;
            $02 = mt + $01 | 0;
            $03 = $02 << 2;
            $04 = HEAPI32[$03 >> 2] | 0;
            $05 = $04 & LOWER_MASK;
            $06 = mt + kk | 0;
            $07 = $06 << 2;
            $08 = HEAPI32[$07 >> 2] | 0;
            $09 = $08 & UPPER_MASK;
            y = $09 | $05;
            $11 = mt + kk | 0;
            $12 = $11 << 2;
            $13 = y & 1;
            $14 = mag01 + $13 | 0;
            $15 = $14 << 2;
            $16 = HEAPI32[$15 >> 2] | 0;
            $17 = y >> 1;
            $18 = kk + M | 0;
            $19 = mt + $18 | 0;
            $20 = $19 << 2;
            $21 = HEAPI32[$20 >> 2] | 0;
            $22 = $21 ^ $17;
            $23 = $22 ^ $16;
            HEAPI32[$12>>2] = $23 | 0;
        }
        for (; (kk | 0) < N - 1; kk = kk + 1 | 0) {
            $24 = kk + 1 | 0;
            $25 = mt + $24 | 0;
            $26 = $25 << 2;
            $27 = HEAPI32[$26 >> 2] | 0;
            $28 = $27 & LOWER_MASK;
            $29 = mt + kk | 0;
            $30 = $29 << 2;
            $31 = HEAPI32[$30 >> 2] | 0;
            $32 = $31 & UPPER_MASK;
            y = $32 | $28;
            $34 = mt + kk | 0;
            $35 = $34 << 2;
            $36 = y & 1;
            $37 = mag01 + $36 | 0;
            $38 = $37 << 2;
            $39 = HEAPI32[$38 >> 2] | 0;
            $40 = y >> 1;
            $41 = M - N | 0;
            $42 = kk + $41 | 0;
            $43 = mt + $42 | 0;
            $44 = $43 << 2;
            $45 = HEAPI32[$44 >> 2] | 0;
            $46 = $45 ^ $40;
            $47 = $46 ^ $39;
            HEAPI32[$35>>2] = $47 | 0;
        }
        $48 = mt + 0 | 0;
        $49 = $48 << 2;
        $50 = HEAPI32[$49 >> 2] | 0;
        $51 = $50 & LOWER_MASK;
        $52 = N - 1 | 0;
        $53 = mt + $52 | 0;
        $54 = $53 << 2;
        $55 = HEAPI32[$54 >> 2] | 0;
        $56 = $55 & UPPER_MASK;
        y = $56 | $51;
        $58 = N - 1 | 0;
        $59 = mt + $58 | 0;
        $60 = $59 << 2;
        $61 = y & 1;
        $62 = mag01 + $61 | 0;
        $63 = $62 << 2;
        $64 = HEAPI32[$63 >> 2] | 0;
        $65 = y >> 1;
        $66 = M - 1 | 0;
        $67 = mt + $66 | 0;
        $68 = $67 << 2;
        $69 = HEAPI32[$68 >> 2] | 0;
        $70 = $69 ^ $65;
        $71 = $70 ^ $64;
        HEAPI32[$60>>2] = $71 | 0;
        mti = 0;
    }
    $72 = mt + mti | 0;
    $73 = $72 << 2;
    y = HEAPI32[$73 >> 2] | 0;
    mti = mti + 1 | 0;
    $76 = y >> 11;
    y = y ^ $76;
    $78 = y << 7;
    $79 = $78 & 2636928640;
    y = y ^ $79;
    $81 = y << 15;
    $82 = $81 & 4022730752;
    y = y ^ $82;
    $84 = y >> 18;
    y = y ^ $84;
    return y | 0;
}    
return { 
    genrand_int32:genrand_int32, 
};
}(Stdlib, Ffi, buffer))
