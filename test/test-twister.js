// Generated by Dish 0.0.1
import Ffi from 'ffi'
import {buffer} from 'ffi'
import Stdlib from 'stdlib'
export const MersenneTwister = (function(stdlib, foreign, heap) {
"use asm";
var HEAPI32 = new stdlib.Int32Array(heap);
var malloc = foreign.malloc;
var imul = stdlib.Math.imul;
var N = 624;
var M = 397;
var MATRIX_A = 2567483615;
var UPPER_MASK = 2147483648;
var LOWER_MASK = 2147483647;
var mt = 0;
var mti = 625;
function init_genrand(s) {
    s = s | 0;
    var __01__ = 0, __02__ = 0, __03__ = 0, __04__ = 0, __05__ = 0, __06__ = 0, __07__ = 0, __08__ = 0, __09__ = 0, __10__ = 0, __11__ = 0, __12__ = 0, __16__ = 0, __17__ = 0, __18__ = 0, __19__ = 0, __20__ = 0;
    var n = 0;
    var t2 = 0;
    var t3 = 0;
    var t4 = 0;
    var r1 = 0.0;
    var r3 = 0.0;
    r1 = +1812433253;
    mt = (malloc(N << 2) | 0) >> 2;
    __01__ = mt + 0 | 0;
    __02__ = __01__ << 2;
    __03__ = s & 4294967295;
    HEAPI32[__02__ >> 2] = __03__ | 0;
    for (mti = 1; mti < N; mti = mti + 1 | 0) {
        __04__ = mti - 1 | 0;
        __05__ = mt + __04__ | 0;
        __06__ = __05__ << 2;
        __07__ = HEAPI32[__06__ >> 2] | 0;
        __08__ = __07__ >> 30;
        __09__ = mti - 1 | 0;
        __10__ = mt + __09__ | 0;
        __11__ = __10__ << 2;
        __12__ = HEAPI32[__11__ >> 2] | 0;
        t2 = __12__ ^ __08__;
        r3 = +(r1 * +(t2));
        t3 = ~~(r3) + mti | 0;
        __16__ = mt + mti | 0;
        __17__ = __16__ << 2;
        __18__ = t3 & 4294967295;
        HEAPI32[__17__ >> 2] = __18__ | 0;
        __19__ = mt + mti | 0;
        __20__ = __19__ << 2;
        t4 = HEAPI32[__20__ >> 2] | 0;
        if (mti < 6) {
            console.log('test-twister: t2 = ', t2, t3, r3, t4);
        }
    }
    return 0 | 0;
}
function genrand_int32() {
    var __01__ = 0, __02__ = 0, __03__ = 0, __04__ = 0, __05__ = 0, __06__ = 0, __07__ = 0, __08__ = 0, __09__ = 0, __11__ = 0, __12__ = 0, __13__ = 0, __14__ = 0, __15__ = 0, __16__ = 0, __17__ = 0, __18__ = 0, __19__ = 0, __20__ = 0, __21__ = 0, __22__ = 0, __23__ = 0, __24__ = 0, __25__ = 0, __26__ = 0, __27__ = 0, __28__ = 0, __29__ = 0, __30__ = 0, __31__ = 0, __32__ = 0, __34__ = 0, __35__ = 0, __36__ = 0, __37__ = 0, __38__ = 0, __39__ = 0, __40__ = 0, __41__ = 0, __42__ = 0, __43__ = 0, __44__ = 0, __45__ = 0, __46__ = 0, __47__ = 0, __48__ = 0, __49__ = 0, __50__ = 0, __51__ = 0, __52__ = 0, __53__ = 0, __54__ = 0, __55__ = 0, __56__ = 0, __58__ = 0, __59__ = 0, __60__ = 0, __61__ = 0, __62__ = 0, __63__ = 0, __64__ = 0, __65__ = 0, __66__ = 0, __67__ = 0, __68__ = 0, __69__ = 0, __70__ = 0, __71__ = 0, __72__ = 0, __73__ = 0, __76__ = 0, __78__ = 0, __79__ = 0, __81__ = 0, __82__ = 0, __84__ = 0;
    var y = 0;
    var mag01 = 0;
    var kk = 0;
    mag01 = (malloc(2 << 2) | 0) >> 2;
    HEAPI32[(mag01+0)<<2>>2] = 0;
    HEAPI32[(mag01+1)<<2>>2] = MATRIX_A;
    if (mti >= N) {
        if (mti == N + 1) {
            init_genrand(5489);
        }
        for (kk = 0; (kk | 0) < N - M; kk = kk + 1 | 0) {
            __01__ = kk + 1 | 0;
            __02__ = mt + __01__ | 0;
            __03__ = __02__ << 2;
            __04__ = HEAPI32[__03__ >> 2] | 0;
            __05__ = __04__ & LOWER_MASK;
            __06__ = mt + kk | 0;
            __07__ = __06__ << 2;
            __08__ = HEAPI32[__07__ >> 2] | 0;
            __09__ = __08__ & UPPER_MASK;
            y = __09__ | __05__;
            __11__ = mt + kk | 0;
            __12__ = __11__ << 2;
            __13__ = y & 1;
            __14__ = mag01 + __13__ | 0;
            __15__ = __14__ << 2;
            __16__ = HEAPI32[__15__ >> 2] | 0;
            __17__ = y >> 1;
            __18__ = kk + M | 0;
            __19__ = mt + __18__ | 0;
            __20__ = __19__ << 2;
            __21__ = HEAPI32[__20__ >> 2] | 0;
            __22__ = __21__ ^ __17__;
            __23__ = __22__ ^ __16__;
            HEAPI32[__12__ >> 2] = __23__ | 0;
        }
        for (; (kk | 0) < N - 1; kk = kk + 1 | 0) {
            __24__ = kk + 1 | 0;
            __25__ = mt + __24__ | 0;
            __26__ = __25__ << 2;
            __27__ = HEAPI32[__26__ >> 2] | 0;
            __28__ = __27__ & LOWER_MASK;
            __29__ = mt + kk | 0;
            __30__ = __29__ << 2;
            __31__ = HEAPI32[__30__ >> 2] | 0;
            __32__ = __31__ & UPPER_MASK;
            y = __32__ | __28__;
            __34__ = mt + kk | 0;
            __35__ = __34__ << 2;
            __36__ = y & 1;
            __37__ = mag01 + __36__ | 0;
            __38__ = __37__ << 2;
            __39__ = HEAPI32[__38__ >> 2] | 0;
            __40__ = y >> 1;
            __41__ = M - N | 0;
            __42__ = kk + __41__ | 0;
            __43__ = mt + __42__ | 0;
            __44__ = __43__ << 2;
            __45__ = HEAPI32[__44__ >> 2] | 0;
            __46__ = __45__ ^ __40__;
            __47__ = __46__ ^ __39__;
            HEAPI32[__35__ >> 2] = __47__ | 0;
        }
        __48__ = mt + 0 | 0;
        __49__ = __48__ << 2;
        __50__ = HEAPI32[__49__ >> 2] | 0;
        __51__ = __50__ & LOWER_MASK;
        __52__ = N - 1 | 0;
        __53__ = mt + __52__ | 0;
        __54__ = __53__ << 2;
        __55__ = HEAPI32[__54__ >> 2] | 0;
        __56__ = __55__ & UPPER_MASK;
        y = __56__ | __51__;
        __58__ = N - 1 | 0;
        __59__ = mt + __58__ | 0;
        __60__ = __59__ << 2;
        __61__ = y & 1;
        __62__ = mag01 + __61__ | 0;
        __63__ = __62__ << 2;
        __64__ = HEAPI32[__63__ >> 2] | 0;
        __65__ = y >> 1;
        __66__ = M - 1 | 0;
        __67__ = mt + __66__ | 0;
        __68__ = __67__ << 2;
        __69__ = HEAPI32[__68__ >> 2] | 0;
        __70__ = __69__ ^ __65__;
        __71__ = __70__ ^ __64__;
        HEAPI32[__60__ >> 2] = __71__ | 0;
        mti = 0;
    }
    __72__ = mt + mti | 0;
    __73__ = __72__ << 2;
    y = HEAPI32[__73__ >> 2] | 0;
    mti = mti + 1 | 0;
    __76__ = y >> 11;
    y = y ^ __76__;
    __78__ = y << 7;
    __79__ = __78__ & 2636928640;
    y = y ^ __79__;
    __81__ = y << 15;
    __82__ = __81__ & 4022730752;
    y = y ^ __82__;
    __84__ = y >> 18;
    y = y ^ __84__;
    return y | 0;
}    
return { 
    genrand_int32:genrand_int32, 
};
}(Stdlib, Ffi, buffer))
