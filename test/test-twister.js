/** generated by dish 0.0.1 */
import Ffi from 'ffi'
import {buffer} from 'ffi'
import Stdlib from 'stdlib'
export const MersenneTwister = (function(stdlib, foreign, heap) {
"use asm";
var HEAPI8 = new stdlib.Int8Array(heap);
var HEAPU8 = new stdlib.Uint8Array(heap);
var HEAPI16 = new stdlib.Int16Array(heap);
var HEAPU16 = new stdlib.Uint16Array(heap);
var HEAPI32 = new stdlib.Int32Array(heap);
var HEAPU32 = new stdlib.Uint32Array(heap);
var HEAPF32 = new stdlib.Float32Array(heap);
var HEAPF64 = new stdlib.Float64Array(heap);
var malloc = foreign.malloc;
var free = foreign.free;
var N = 624;
var M = 397;
var MATRIX_A = 2567483615;
var UPPER_MASK = 2147483648;
var LOWER_MASK = 2147483647;
var mt = 0;
var mti = 625;
var mag01 = 0;
function init_genrand(s) {
    s = s | 0;
    var __01__ = 0, __02__ = 0, __03__ = 0, __04__ = 0, __05__ = 0, __06__ = 0, __07__ = 0, __08__ = 0, __09__ = 0, __10__ = 0, __11__ = 0, __12__ = 0, __13__ = 0, __14__ = 0, __15__ = 0, __16__ = 0, __18__ = 0, __19__ = 0, __20__ = 0;
    var n = 0;
    var t1 = 0;
    var t2 = 0.0;
    var t3 = 0.0;
    var t0 = 0;
    var r1 = 0.0;
    var r3 = 0.0;
    r1 = +1812433253;
    mt = (malloc(N << 2) | 0) >> 2;
    mag01 = (malloc(2 << 2) | 0) >> 2;
    __01__ = mag01 + 0 | 0;
    __02__ = __01__ << 2;
    HEAPI32[__02__ >> 2] = 0 | 0;
    __03__ = mag01 + 1 | 0;
    __04__ = __03__ << 2;
    HEAPI32[__04__ >> 2] = MATRIX_A | 0;
    __05__ = mt + 0 | 0;
    __06__ = __05__ << 2 | 0;
    __07__ = s & 4294967295 | 0;
    HEAPU32[__06__ >> 2] = __07__ | 0;
    for (mti = 1; (mti | 0) < (N | 0); mti = mti + 1 | 0) {
        __08__ = mti - 1 | 0;
        __09__ = mt + __08__ | 0;
        __10__ = __09__ << 2;
        __11__ = HEAPI32[__10__ >> 2] | 0;
        __12__ = __11__ >> 30;
        __13__ = mti - 1 | 0;
        __14__ = mt + __13__ | 0;
        __15__ = __14__ << 2;
        __16__ = HEAPI32[__15__ >> 2] | 0;
        t1 = __16__ ^ __12__;
        t2 = +(t1 | 0) | 0;
        t3 = +(mti | 0) | 0;
        t0 = ~~(r1 * t2 + t3) | 0;
        __18__ = mt + mti | 0;
        __19__ = __18__ << 2 | 0;
        __20__ = t0 & 4294967295 | 0;
        HEAPU32[__19__ >> 2] = __20__ | 0;
    }
    return 0 | 0;
}
function genrand_int32() {
    var __01__ = 0, __02__ = 0, __04__ = 0, __05__ = 0, __06__ = 0, __07__ = 0, __08__ = 0, __09__ = 0, __10__ = 0, __11__ = 0, __12__ = 0, __14__ = 0, __15__ = 0, __16__ = 0, __17__ = 0, __18__ = 0, __19__ = 0, __20__ = 0, __21__ = 0, __22__ = 0, __23__ = 0, __24__ = 0, __25__ = 0, __26__ = 0, __27__ = 0, __28__ = 0, __29__ = 0, __30__ = 0, __31__ = 0, __32__ = 0, __33__ = 0, __34__ = 0, __35__ = 0, __37__ = 0, __38__ = 0, __39__ = 0, __40__ = 0, __41__ = 0, __42__ = 0, __43__ = 0, __44__ = 0, __45__ = 0, __46__ = 0, __47__ = 0, __48__ = 0, __49__ = 0, __50__ = 0, __51__ = 0, __52__ = 0, __53__ = 0, __54__ = 0, __55__ = 0, __56__ = 0, __57__ = 0, __58__ = 0, __59__ = 0, __61__ = 0, __62__ = 0, __63__ = 0, __64__ = 0, __65__ = 0, __66__ = 0, __67__ = 0, __68__ = 0, __69__ = 0, __70__ = 0, __71__ = 0, __72__ = 0, __73__ = 0, __74__ = 0, __75__ = 0, __76__ = 0, __79__ = 0, __81__ = 0, __82__ = 0, __84__ = 0, __85__ = 0, __87__ = 0;
    var y = 0;
    var kk = 0;
    var c1 = 0;
    __01__ = N | 0 | 0;
    __02__ = mti | 0 | 0;
    c1 = __02__ >= __01__ | 0;
    if (c1) {
        if (mti | 0 == N + 1 | 0) {
            init_genrand(5489);
        }
        for (kk = 0; (kk | 0 | 0) < (N - M | 0); kk = kk + 1 | 0) {
            __04__ = kk + 1 | 0;
            __05__ = mt + __04__ | 0;
            __06__ = __05__ << 2;
            __07__ = HEAPI32[__06__ >> 2] | 0;
            __08__ = __07__ & LOWER_MASK;
            __09__ = mt + kk | 0;
            __10__ = __09__ << 2;
            __11__ = HEAPI32[__10__ >> 2] | 0;
            __12__ = __11__ & UPPER_MASK;
            y = __12__ | __08__;
            __14__ = mt + kk | 0;
            __15__ = __14__ << 2 | 0;
            __16__ = y & 1 | 0;
            __17__ = mag01 + __16__ | 0;
            __18__ = __17__ << 2 | 0;
            __19__ = HEAPU32[__18__ >> 2] | 0;
            __20__ = y >> 1 | 0;
            __21__ = kk + M | 0;
            __22__ = mt + __21__ | 0;
            __23__ = __22__ << 2 | 0;
            __24__ = HEAPU32[__23__ >> 2] | 0;
            __25__ = __24__ ^ __20__ | 0;
            __26__ = __25__ ^ __19__ | 0;
            HEAPU32[__15__ >> 2] = __26__ | 0;
        }
        for (; (kk | 0 | 0) < (N - 1 | 0); kk = kk + 1 | 0) {
            __27__ = kk + 1 | 0;
            __28__ = mt + __27__ | 0;
            __29__ = __28__ << 2;
            __30__ = HEAPI32[__29__ >> 2] | 0;
            __31__ = __30__ & LOWER_MASK;
            __32__ = mt + kk | 0;
            __33__ = __32__ << 2;
            __34__ = HEAPI32[__33__ >> 2] | 0;
            __35__ = __34__ & UPPER_MASK;
            y = __35__ | __31__;
            __37__ = mt + kk | 0;
            __38__ = __37__ << 2 | 0;
            __39__ = y & 1 | 0;
            __40__ = mag01 + __39__ | 0;
            __41__ = __40__ << 2 | 0;
            __42__ = HEAPU32[__41__ >> 2] | 0;
            __43__ = y >> 1 | 0;
            __44__ = M - N | 0;
            __45__ = kk + __44__ | 0;
            __46__ = mt + __45__ | 0;
            __47__ = __46__ << 2 | 0;
            __48__ = HEAPU32[__47__ >> 2] | 0;
            __49__ = __48__ ^ __43__ | 0;
            __50__ = __49__ ^ __42__ | 0;
            HEAPU32[__38__ >> 2] = __50__ | 0;
        }
        __51__ = mt + 0 | 0;
        __52__ = __51__ << 2;
        __53__ = HEAPI32[__52__ >> 2] | 0;
        __54__ = __53__ & LOWER_MASK;
        __55__ = N - 1 | 0;
        __56__ = mt + __55__ | 0;
        __57__ = __56__ << 2;
        __58__ = HEAPI32[__57__ >> 2] | 0;
        __59__ = __58__ & UPPER_MASK;
        y = __59__ | __54__;
        __61__ = N - 1 | 0;
        __62__ = mt + __61__ | 0;
        __63__ = __62__ << 2 | 0;
        __64__ = y & 1 | 0;
        __65__ = mag01 + __64__ | 0;
        __66__ = __65__ << 2 | 0;
        __67__ = HEAPU32[__66__ >> 2] | 0;
        __68__ = y >> 1 | 0;
        __69__ = M - 1 | 0;
        __70__ = mt + __69__ | 0;
        __71__ = __70__ << 2 | 0;
        __72__ = HEAPU32[__71__ >> 2] | 0;
        __73__ = __72__ ^ __68__ | 0;
        __74__ = __73__ ^ __67__ | 0;
        HEAPU32[__63__ >> 2] = __74__ | 0;
        mti = 0;
    }
    __75__ = mt + mti | 0;
    __76__ = __75__ << 2;
    y = HEAPI32[__76__ >> 2] | 0;
    mti = mti + 1 | 0;
    __79__ = y >> 11;
    y = y ^ __79__;
    __81__ = y << 7;
    __82__ = __81__ & 2636928640;
    y = y ^ __82__;
    __84__ = y << 15;
    __85__ = __84__ & 4022730752;
    y = y ^ __85__;
    __87__ = y >> 18;
    y = y ^ __87__;
    return y | 0;
}
function test(n, m) {
    n = n | 0;
    m = m | 0;
    var __00__ = 0;
    var i = 0;
    var j = 0;
    var z = 0;
    for (i = 0 | 0; (i | 0 | 0) < (n | 0 | 0); i = i + 1 | 0) {
        for (j = 0 | 0; (j | 0 | 0) < (m | 0 | 0); j = j + 1 | 0) {
            z = genrand_int32() | 0;
        }
    }
}    
return { 
    genrand_int32:genrand_int32,
    test:test, 
};
}(Stdlib, Ffi, buffer))
for (let k in MersenneTwister) { 
    Ffi['MersenneTwister_'+k] = MersenneTwister[k] 
}
