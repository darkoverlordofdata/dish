/** generated by dish 0.0.1 */
import Ffi from 'ffi'
import {buffer} from 'ffi'
import Stdlib from 'stdlib'
export const Entity = function (h, b, d) {
    'use asm';
    var a = new h.Int32Array(d);
    var f = b.malloc;
    var g = b.free;
    function c(b, c) {
        b = b | 0;
        c = c | 0;
        var d = 0, e = 0;
        d = b + 2;
        e = d << 2;
        a[e >> 2] = c;
    }
    function i(b) {
        b = b | 0;
        var f = 0;
        var c = 0, d = 0, e = 0;
        d = b + 0;
        e = d << 2;
        c = a[e >> 2];
        return c | 0;
    }
    function j(b, c) {
        b = b | 0;
        c = c | 0;
        var d = 0, e = 0;
        d = b + 0;
        e = d << 2;
        a[e >> 2] = c;
    }
    function k(b) {
        b = b | 0;
        var f = 0;
        var c = 0, d = 0, e = 0;
        d = b + 1;
        e = d << 2;
        c = a[e >> 2];
        return c | 0;
    }
    function l(b, c) {
        b = b | 0;
        c = c | 0;
        var d = 0, e = 0;
        d = b + 1;
        e = d << 2;
        a[e >> 2] = c;
    }
    function m(b, c) {
        b = b | 0;
        c = c | 0;
        var i = 0;
        var d = 0, e = 0, f = 0, g = 0;
        var h = 0;
        e = c + 3 | 0;
        f = b + e | 0;
        g = f << 2;
        h = a[g >> 2] | 0;
        d = h;
        return d | 0;
    }
    function e(b, c, d) {
        b = b | 0;
        c = c | 0;
        d = d | 0;
        var e = 0, f = 0, g = 0;
        e = c + 3;
        f = b + e;
        g = f << 2;
        a[g >> 2] = d;
    }
    return {
        Entity: c,
        getId: i,
        setId: j,
        getEnabled: k,
        setEnabled: l,
        getComponent: m,
        setComponent: e
    };
}(Stdlib, Ffi, buffer);
for (let k in Entity) {
    Ffi['Entity_' + k] = Entity[k];
}