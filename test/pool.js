/** generated by dish 0.0.1 */
import Ffi from 'ffi'
import {buffer} from 'ffi'
import Stdlib from 'stdlib'
export const pool = Ffi["pool"] = (function(stdlib, foreign, heap) {
"use asm";
var HEAPI8 = new stdlib.Int8Array(heap);
var HEAPU8 = new stdlib.Uint8Array(heap);
var HEAPI16 = new stdlib.Int16Array(heap);
var HEAPU16 = new stdlib.Uint16Array(heap);
var HEAPI32 = new stdlib.Int32Array(heap);
var HEAPU32 = new stdlib.Uint32Array(heap);
var HEAPF32 = new stdlib.Float32Array(heap);
var HEAPF64 = new stdlib.Float64Array(heap);
var malloc = foreign.malloc;
var entity_getId = foreign.entity.entity_getId;
var entity_setId = foreign.entity.entity_setId;
var entity_getEnabled = foreign.entity.entity_getEnabled;
var entity_setEnabled = foreign.entity.entity_setEnabled;
var entity_getComponent = foreign.entity.entity_getComponent;
var entity_setComponent = foreign.entity.entity_setComponent;
var EntityIsNotEnabledException = foreign.exceptions.EntityIsNotEnabledException;
var EntityAlreadyHasComponentException = foreign.exceptions.EntityAlreadyHasComponentException;
var POOL_SIZE = 4096;
var init = 1;
var pool = 0;
var totalComponents = 0;
var count = 0;
var index = 0;
var entitySize = 0;
var uniqueId = 0;
function test(ptr, i) {
    ptr = ptr | 0;
    i = i | 0;
    var __01__ = 0, __02__ = 0;
    var x = 0.0;
    var value = 0;
    var k = 0;
    var result = 0;
    value = ptr;
    __01__ = value + i | 0;
    __02__ = __01__ << 2;
    result = HEAPI32[__02__ >> 2] | 0;
    return result | 0;
}
function initialize(count) {
    count = count | 0;
    var __01__ = 0, __02__ = 0;
    if (init) {
        totalComponents = count;
        __01__ = COMPONENTS * 4 | 0;
        __02__ = count * 4 | 0;
        entitySize = __02__ + __01__ | 0;
        uniqueId = 0;
        pool = (malloc(POOL_SIZE << 2) | 0) >> 2;
        init = false;
    }
}
function getTotalComponents() {
    var __00__ = 0;
    return totalComponents | 0;
}
function getCount() {
    var __00__ = 0;
    return count | 0;
}
function createEntity() {
    var __00__ = 0;
    var entity = 0;
    var i = 0;
    entity = (malloc(2 << 2) | 0) >> 2;
    HEAPI32[(entity+0)<<2>>2] = int;
    HEAPI32[(entity+1)<<2>>2] = entitySize;
    uniqueId = uniqueId + 1 | 0;
    entity_setId(entity, uniqueId);
    entity_setEnabled(entity, true);
    for (i = 0; (i | 0) < totalComponents; i = i + 1 | 0) {
        entity_setComponent(entity, i, 0);
    }
    return entity | 0;
}
function destroyEntity(entity) {
    entity = entity | 0;
    var __00__ = 0;
    free(entity);
}
function destroyAllEntities() {
    var __00__ = 0;
}
function hasEntity(entity) {
    entity = entity | 0;
    var __00__ = 0;
}
function getEntities(matching) {
    matching = matching | 0;
    var __00__ = 0;
}
function getGroup(matching) {
    matching = matching | 0;
    var __00__ = 0;
}
function updateGroupsComponentAddedOrRemoved(entity, index, component) {
    entity = entity | 0;
    index = index | 0;
    component = component | 0;
    var __00__ = 0;
}
function updateGroupsComponentReplaced(entity, index, prevcomponent, newcomponent) {
    entity = entity | 0;
    index = index | 0;
    prevcomponent = prevcomponent | 0;
    newcomponent = newcomponent | 0;
    var __00__ = 0;
}
function onEntityReleased(entity) {
    entity = entity | 0;
    var __00__ = 0;
}
function addComponent(entity, index, component) {
    entity = entity | 0;
    index = index | 0;
    component = component | 0;
    var __00__ = 0;
    entity_setComponent(entity, index, component);
    onComponentAdded(entity, index, component);
}
function removeComponent(entity, index) {
    entity = entity | 0;
    index = index | 0;
    var __00__ = 0;
}
function replaceComponent(entity, index, component) {
    entity = entity | 0;
    index = index | 0;
    component = component | 0;
    var __00__ = 0;
}
function getComponent(entity, index) {
    entity = entity | 0;
    index = index | 0;
    var __00__ = 0;
}
function hasComponent(entity, index) {
    entity = entity | 0;
    index = index | 0;
    var __00__ = 0;
}    
return { 
    test:test,
    initialize:initialize,
    getTotalComponents:getTotalComponents,
    getCount:getCount,
    createEntity:createEntity,
    destroyEntity:destroyEntity,
    destroyAllEntities:destroyAllEntities,
    hasEntity:hasEntity,
    getEntities:getEntities,
    getGroup:getGroup,
    updateGroupsComponentAddedOrRemoved:updateGroupsComponentAddedOrRemoved,
    updateGroupsComponentReplaced:updateGroupsComponentReplaced,
    onEntityReleased:onEntityReleased,
    addComponent:addComponent,
    removeComponent:removeComponent,
    replaceComponent:replaceComponent,
    getComponent:getComponent,
    hasComponent:hasComponent, 
};
}(Stdlib, Ffi, buffer))
