/** generated by dish 0.0.1 */
import Ffi from 'ffi'
import {buffer} from 'ffi'
import Stdlib from 'stdlib'
export const entity = Ffi["entity"] = (function(stdlib, foreign, heap) {
"use asm";
var HEAPI8 = new stdlib.Int8Array(heap);
var HEAPU8 = new stdlib.Uint8Array(heap);
var HEAPI16 = new stdlib.Int16Array(heap);
var HEAPU16 = new stdlib.Uint16Array(heap);
var HEAPI32 = new stdlib.Int32Array(heap);
var HEAPU32 = new stdlib.Uint32Array(heap);
var HEAPF32 = new stdlib.Float32Array(heap);
var HEAPF64 = new stdlib.Float64Array(heap);
function getId(entity) {
    entity = entity | 0;
    var __01__ = 0, __02__ = 0;
    var id = 0;
    __01__ = entity + 0 | 0;
    __02__ = __01__ << 2;
    id = HEAPI32[__02__ >> 2] | 0;
    return id | 0;
}
function setId(entity, id) {
    entity = entity | 0;
    id = id | 0;
    var __01__ = 0, __02__ = 0;
    __01__ = entity + 0 | 0;
    __02__ = __01__ << 2;
    HEAPI32[__02__ >> 2] = id | 0;
}
function getEnabled(entity) {
    entity = entity | 0;
    var __01__ = 0, __02__ = 0;
    var enabled = 0;
    __01__ = entity + 1 | 0;
    __02__ = __01__ << 2;
    enabled = HEAPI32[__02__ >> 2] | 0;
    return enabled | 0;
}
function setEnabled(entity, enabled) {
    entity = entity | 0;
    enabled = enabled | 0;
    var __01__ = 0, __02__ = 0;
    __01__ = entity + 1 | 0;
    __02__ = __01__ << 2;
    HEAPI32[__02__ >> 2] = enabled | 0;
}
function getComponent(entity, index) {
    entity = entity | 0;
    index = index | 0;
    var __01__ = 0, __02__ = 0, __03__ = 0;
    var component = 0;
    __01__ = 2 + index | 0;
    __02__ = entity + __01__ | 0;
    __03__ = __02__ << 2;
    component = HEAPI32[__03__ >> 2] | 0;
    return component | 0;
}
function setComponent(entity, index, value) {
    entity = entity | 0;
    index = index | 0;
    value = value | 0;
    var __01__ = 0, __02__ = 0, __03__ = 0;
    __01__ = 2 + index | 0;
    __02__ = entity + __01__ | 0;
    __03__ = __02__ << 2;
    HEAPI32[__03__ >> 2] = value | 0;
}    
return { 
    getId:getId,
    setId:setId,
    getEnabled:getEnabled,
    setEnabled:setEnabled,
    getComponent:getComponent,
    setComponent:setComponent, 
};
}(Stdlib, Ffi, buffer))
