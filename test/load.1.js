// Generated by CoffeeScript 1.10.0

/*
 * Run tests
 *import {buffer} from 'ffi'
 */
Promise.all(['ffi', 'test1', 'test2', 'test-twister', 'mt19937'].map(function(x) {
  return System["import"](x);
})).then(function(arg) {
  var MersenneTwister, buffer, mt19937, ref, ref1, ref2, ref3, ref4, test1, test2;
  (ref = arg[0], buffer = ref.buffer), (ref1 = arg[1], test1 = ref1.test1), (ref2 = arg[2], test2 = ref2.test2), (ref3 = arg[3], MersenneTwister = ref3.MersenneTwister), (ref4 = arg[4], mt19937 = ref4.mt19937);
  return describe('Basic Tests', function() {
    it('Factorial', function() {
      expect(test1.factorial(10)).to.equal(45);
    });
    it('Alloc', function() {
      expect(test1.alloc(10)).to.equal(typeof malloc !== "undefined" && malloc !== null ? 68 : 4);
      expect(test1.alloc(10)).to.equal(typeof malloc !== "undefined" && malloc !== null ? 80 : 14);
    });
    it('List', function() {
      expect(test1.values()).to.equal(typeof malloc !== "undefined" && malloc !== null ? 92 : 24);
      expect(test2.index((typeof malloc !== "undefined" && malloc !== null ? 92 : 24), 2)).to.equal(44);
    });
    it('Random', function() {
      expect(mt19937.genrand_int32()).to.equal(testResults[0]);
      expect(mt19937.genrand_int32()).to.equal(testResults[1]);
      expect(mt19937.genrand_int32()).to.equal(testResults[2]);
      expect(mt19937.genrand_int32()).to.equal(testResults[3]);
      expect(mt19937.genrand_int32()).to.equal(testResults[4]);
    });
    it('And', function() {
      return expect(test2.and(42)).to.equal(42);
    });
    return it('CreateEntity', function() {
      var entity;
      entity = test1.createEntity();
      return expect(test2.index(entity, 0)).to.equal(42);
    });
  });
}, function(err) {
  return console.log(err);
});
