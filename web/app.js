// Generated by CoffeeScript 1.10.0
System.register("ffi", [], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var Ffi, HEAP, HEAP_SIZE, allocator, buffer, foreign, bufferMax;
    return {
        setters:[],
        execute: function() {
            /*
            ## Foreign function interface
             */
            HEAP_SIZE = 0x40000;
            Ffi = (function () {
                function Ffi() { }
                Ffi.EntityIsNotEnabledException = function () {
                    throw new Error('EntityIsNotEnabledException');
                };
                Ffi.EntityAlreadyHasComponentException = function (index) {
                    throw new Error("EntityAlreadyHasComponentException - " + index);
                };
                Ffi.now = function () {
                    return performance.now();
                };
                /*
                 * malloc
                 *
                 * @param nBytes number of bytes required
                 * @returns starting offset in the heap
                 */
                Ffi.malloc = function (nBytes) {
                    var offset;
                    if (typeof malloc !== "undefined" && malloc !== null) {
                        return allocator.alloc(nBytes);
                    }
                    else {
                        /*
                        * Fallback:
                        * this is a naive implementation of malloc.
                        * memory is only allocated, never freed.
                         */
                        offset = HEAP[0];
                        HEAP[0] = offset + nBytes;
                        return offset;
                    }
                };
                Ffi.free = function (addr) {
                    if (typeof malloc !== "undefined" && malloc !== null) {
                        return allocator.free(addr);
                    }
                };
                return Ffi;
            })();
            exports_1("default",Ffi);
            exports_1("buffer", buffer = new ArrayBuffer(HEAP_SIZE));
            exports_1("foreign", foreign = Ffi);
            exports_1("bufferMax", bufferMax = HEAP_SIZE);
            if (typeof malloc !== "undefined" && malloc !== null) {
                allocator = new malloc.Allocator(buffer);
            }
            else {
                HEAP = new Int32Array(buffer);
                HEAP[0] = 16;
            }
        }
    }
});
// Generated by CoffeeScript 1.10.0
System.register("stdlib", [], function(exports_2, context_2) {
    "use strict";
    var __moduleName = context_2 && context_2.id;
    var Stdlib;
    return {
        setters:[],
        execute: function() {
            /*
            ## Stdlib
             */
            Stdlib = (function () {
                function Stdlib() { }
                Stdlib.Math = Math;
                Stdlib.Int8Array = Int8Array;
                Stdlib.Int16Array = Int16Array;
                Stdlib.Int32Array = Int32Array;
                Stdlib.Uint8Array = Uint8Array;
                Stdlib.Uint16Array = Uint16Array;
                Stdlib.Uint32Array = Uint32Array;
                Stdlib.Float32Array = Float32Array;
                Stdlib.Float64Array = Float64Array;
                Stdlib.NaN = NaN;
                Stdlib.Infinity = Infinity;
                return Stdlib;
            })();
            exports_2("default",Stdlib);
        }
    }
});
System.register("entity", ["ffi", "stdlib"], function(exports_3, context_3) {
    "use strict";
    var __moduleName = context_3 && context_3.id;
    var ffi_1, ffi_2, stdlib_1;
    var entity;
    return {
        setters:[
            function (ffi_1_1) {
                ffi_1 = ffi_1_1;
                ffi_2 = ffi_1_1;
            },
            function (stdlib_1_1) {
                stdlib_1 = stdlib_1_1;
            }],
        execute: function() {
            exports_3("entity", entity = (function (stdlib, foreign, heap) {
                "use asm";
                var HEAPI8 = new stdlib.Int8Array(heap);
                var HEAPU8 = new stdlib.Uint8Array(heap);
                var HEAPI16 = new stdlib.Int16Array(heap);
                var HEAPU16 = new stdlib.Uint16Array(heap);
                var HEAPI32 = new stdlib.Int32Array(heap);
                var HEAPU32 = new stdlib.Uint32Array(heap);
                var HEAPF32 = new stdlib.Float32Array(heap);
                var HEAPF64 = new stdlib.Float64Array(heap);
                var malloc = foreign.malloc;
                var free = foreign.free;
                function create(totalComponents) {
                    totalComponents = totalComponents | 0;
                    var __01__ = 0, __02__ = 0;
                    var e = 0;
                    var entitySize = 0;
                    __01__ = totalComponents * 4 | 0;
                    __02__ = __01__ + 4 | 0;
                    entitySize = __02__ + 4 | 0;
                    e = (malloc(entitySize << 2) | 0) >> 2;
                    return e | 0;
                }
                function getId(entity) {
                    entity = entity | 0;
                    var __01__ = 0, __02__ = 0;
                    var id = 0;
                    __01__ = entity + 0 | 0;
                    __02__ = __01__ << 2;
                    id = HEAPI32[__02__ >> 2] | 0;
                    return id | 0;
                }
                function setId(entity, id) {
                    entity = entity | 0;
                    id = id | 0;
                    var __01__ = 0, __02__ = 0;
                    __01__ = entity + 0 | 0;
                    __02__ = __01__ << 2;
                    HEAPI32[__02__ >> 2] = id | 0;
                }
                function getEnabled(entity) {
                    entity = entity | 0;
                    var __01__ = 0, __02__ = 0;
                    var enabled = 0;
                    __01__ = entity + 1 | 0;
                    __02__ = __01__ << 2;
                    enabled = HEAPI32[__02__ >> 2] | 0;
                    return enabled | 0;
                }
                function setEnabled(entity, enabled) {
                    entity = entity | 0;
                    enabled = enabled | 0;
                    var __01__ = 0, __02__ = 0;
                    __01__ = entity + 1 | 0;
                    __02__ = __01__ << 2;
                    HEAPI32[__02__ >> 2] = enabled | 0;
                }
                function getComponent(entity, index) {
                    entity = entity | 0;
                    index = index | 0;
                    var __01__ = 0, __02__ = 0, __03__ = 0;
                    var component = 0;
                    __01__ = 2 + index | 0;
                    __02__ = entity + __01__ | 0;
                    __03__ = __02__ << 2;
                    component = HEAPI32[__03__ >> 2] | 0;
                    return component | 0;
                }
                function setComponent(entity, index, value) {
                    entity = entity | 0;
                    index = index | 0;
                    value = value | 0;
                    var __01__ = 0, __02__ = 0, __03__ = 0;
                    __01__ = 2 + index | 0;
                    __02__ = entity + __01__ | 0;
                    __03__ = __02__ << 2;
                    HEAPI32[__03__ >> 2] = value | 0;
                }
                return {
                    create: create,
                    getId: getId,
                    setId: setId,
                    getEnabled: getEnabled,
                    setEnabled: setEnabled,
                    getComponent: getComponent,
                    setComponent: setComponent,
                };
            }(stdlib_1.default, ffi_1.default, ffi_2.buffer)));
            for (var k in entity) {
                ffi_1.default['entity_' + k] = entity[k];
            }
        }
    }
});
System.register("pool", ["ffi", "stdlib"], function(exports_4, context_4) {
    "use strict";
    var __moduleName = context_4 && context_4.id;
    var ffi_3, ffi_4, stdlib_2;
    var pool;
    return {
        setters:[
            function (ffi_3_1) {
                ffi_3 = ffi_3_1;
                ffi_4 = ffi_3_1;
            },
            function (stdlib_2_1) {
                stdlib_2 = stdlib_2_1;
            }],
        execute: function() {
            exports_4("pool", pool = (function (stdlib, foreign, heap) {
                "use asm";
                var HEAPI8 = new stdlib.Int8Array(heap);
                var HEAPU8 = new stdlib.Uint8Array(heap);
                var HEAPI16 = new stdlib.Int16Array(heap);
                var HEAPU16 = new stdlib.Uint16Array(heap);
                var HEAPI32 = new stdlib.Int32Array(heap);
                var HEAPU32 = new stdlib.Uint32Array(heap);
                var HEAPF32 = new stdlib.Float32Array(heap);
                var HEAPF64 = new stdlib.Float64Array(heap);
                var malloc = foreign.malloc;
                var free = foreign.free;
                var EntityIsNotEnabledException = foreign.EntityIsNotEnabledException;
                var EntityAlreadyHasComponentException = foreign.EntityAlreadyHasComponentException;
                var entity_create = foreign.entity_create;
                var entity_getId = foreign.entity_getId;
                var entity_setId = foreign.entity_setId;
                var entity_getEnabled = foreign.entity_getEnabled;
                var entity_setEnabled = foreign.entity_setEnabled;
                var entity_getComponent = foreign.entity_getComponent;
                var entity_setComponent = foreign.entity_setComponent;
                var POOL_SIZE = 4096;
                var init = 1;
                var pool = 0;
                var totalComponents = 0;
                var count = 0;
                var index = 0;
                var uniqueId = 0;
                function inc(i) {
                    i = i | 0;
                    var __00__ = 0;
                    var k = 0;
                    k = i + 1 | 0;
                    return k | 0;
                }
                function fib(x) {
                    x = x | 0;
                    var __01__ = 0, __02__ = 0;
                    var result = 0;
                    var f1 = 0;
                    var f2 = 0;
                    var x1 = 0;
                    var x2 = 0;
                    var b = 0;
                    __01__ = 2 | 0;
                    __02__ = x | 0;
                    b = __02__ < __01__ | 0;
                    if (b | 0) {
                        result = 1 | 0;
                    }
                    else {
                        x1 = x - 1 | 0;
                        x2 = x - 2 | 0;
                        f2 = fib(x2) | 0;
                        f1 = fib(x1) | 0;
                        result = f1 + f2 | 0;
                    }
                    return result | 0;
                }
                function fibz(x) {
                    x = x | 0;
                    var __01__ = 0, __02__ = 0;
                    var result = 0;
                    var f1 = 0;
                    var f2 = 0;
                    var x1 = 0;
                    var x2 = 0;
                    var b = 0;
                    var i = 0;
                    var a = 0;
                    var v1 = 0;
                    var v2 = 0;
                    var v3 = 0;
                    var v4 = 0;
                    var v5 = 0;
                    __01__ = 2 | 0;
                    __02__ = x | 0;
                    b = __02__ < __01__ | 0;
                    if (b | 0) {
                        result = 1 | 0;
                    }
                    else {
                        i = 1;
                        a = x;
                        while (1) {
                            v1 = i - 1 | 0;
                            v2 = fibz(v1) | 0;
                            v3 = i - 2 | 0;
                            v4 = v2 + a | 0;
                            v5 = v3 < 2 | 0;
                            if (v5) {
                                result = v4;
                                return result | 0;
                            }
                            else {
                                a = v4;
                                i = v3;
                            }
                        }
                    }
                    return result | 0;
                }
                function testInc() {
                    var __01__ = 0;
                    var i = 0;
                    var j = 0;
                    var k = 0;
                    i = 0;
                    while ((i | 0) < 32767) {
                        j = 0;
                        while ((j | 0) < 32767) {
                            __01__ = 32 >> 2;
                            k = j & __01__;
                            j = j + 1 | 0;
                        }
                        i = i + 1 | 0;
                    }
                    return k | 0;
                }
                function test(ptr, i) {
                    ptr = ptr | 0;
                    i = i | 0;
                    var __01__ = 0, __02__ = 0;
                    var x = 0.0;
                    var value = 0;
                    var k = 0;
                    var result = 0;
                    value = ptr;
                    __01__ = value + i | 0;
                    __02__ = __01__ << 2;
                    result = HEAPI32[__02__ >> 2] | 0;
                    return result | 0;
                }
                function initialize(count) {
                    count = count | 0;
                    var __00__ = 0;
                    if (init) {
                        totalComponents = count;
                        uniqueId = 0;
                        pool = (malloc(POOL_SIZE << 2) | 0) >> 2;
                        init = 0;
                    }
                    return init | 0;
                }
                function getTotalComponents() {
                    var __00__ = 0;
                    return totalComponents | 0;
                }
                function getCount() {
                    var __00__ = 0;
                    return count | 0;
                }
                function createEntity() {
                    var __00__ = 0;
                    var entity = 0;
                    var i = 0;
                    entity = entity_create(totalComponents | 0) | 0;
                    uniqueId = uniqueId + 1 | 0;
                    entity_setId(entity | 0, uniqueId | 0);
                    entity_setEnabled(entity | 0, 1 | 0);
                    for (i = 0; (i | 0) < (totalComponents | 0); i = i + 1 | 0) {
                        entity_setComponent(entity | 0, i | 0, 0 | 0);
                    }
                    return entity | 0;
                }
                function destroyEntity(entity) {
                    entity = entity | 0;
                    var __00__ = 0;
                    free(entity | 0);
                }
                function destroyAllEntities() {
                    var __00__ = 0;
                }
                function hasEntity(entity) {
                    entity = entity | 0;
                    var __00__ = 0;
                }
                function getEntities(matching) {
                    matching = matching | 0;
                    var __00__ = 0;
                }
                function getGroup(matching) {
                    matching = matching | 0;
                    var __00__ = 0;
                }
                function updateGroupsComponentAddedOrRemoved(entity, index, component) {
                    entity = entity | 0;
                    index = index | 0;
                    component = component | 0;
                    var __00__ = 0;
                }
                function updateGroupsComponentReplaced(entity, index, prevcomponent, newcomponent) {
                    entity = entity | 0;
                    index = index | 0;
                    prevcomponent = prevcomponent | 0;
                    newcomponent = newcomponent | 0;
                    var __00__ = 0;
                }
                function onEntityReleased(entity) {
                    entity = entity | 0;
                    var __00__ = 0;
                }
                function addComponent(entity, index, component) {
                    entity = entity | 0;
                    index = index | 0;
                    component = component | 0;
                    var __00__ = 0;
                }
                function removeComponent(entity, index) {
                    entity = entity | 0;
                    index = index | 0;
                    var __00__ = 0;
                }
                function replaceComponent(entity, index, component) {
                    entity = entity | 0;
                    index = index | 0;
                    component = component | 0;
                    var __00__ = 0;
                }
                function hasComponent(entity, index) {
                    entity = entity | 0;
                    index = index | 0;
                    var __00__ = 0;
                }
                return {
                    fib: fib,
                    fibz: fibz,
                    testInc: testInc,
                    test: test,
                    initialize: initialize,
                    getTotalComponents: getTotalComponents,
                    getCount: getCount,
                    createEntity: createEntity,
                    destroyEntity: destroyEntity,
                    destroyAllEntities: destroyAllEntities,
                    hasEntity: hasEntity,
                    getEntities: getEntities,
                    getGroup: getGroup,
                    updateGroupsComponentAddedOrRemoved: updateGroupsComponentAddedOrRemoved,
                    updateGroupsComponentReplaced: updateGroupsComponentReplaced,
                    onEntityReleased: onEntityReleased,
                    addComponent: addComponent,
                    removeComponent: removeComponent,
                    replaceComponent: replaceComponent,
                    hasComponent: hasComponent,
                };
            }(stdlib_2.default, ffi_3.default, ffi_4.buffer)));
            for (var k in pool) {
                ffi_3.default['pool_' + k] = pool[k];
            }
        }
    }
});
System.register("unit", ["ffi", "stdlib"], function(exports_5, context_5) {
    "use strict";
    var __moduleName = context_5 && context_5.id;
    var ffi_5, ffi_6, stdlib_3;
    var unit;
    return {
        setters:[
            function (ffi_5_1) {
                ffi_5 = ffi_5_1;
                ffi_6 = ffi_5_1;
            },
            function (stdlib_3_1) {
                stdlib_3 = stdlib_3_1;
            }],
        execute: function() {
            exports_5("unit", unit = (function (stdlib, foreign, heap) {
                "use asm";
                var HEAPI8 = new stdlib.Int8Array(heap);
                var HEAPU8 = new stdlib.Uint8Array(heap);
                var HEAPI16 = new stdlib.Int16Array(heap);
                var HEAPU16 = new stdlib.Uint16Array(heap);
                var HEAPI32 = new stdlib.Int32Array(heap);
                var HEAPU32 = new stdlib.Uint32Array(heap);
                var HEAPF32 = new stdlib.Float32Array(heap);
                var HEAPF64 = new stdlib.Float64Array(heap);
                var malloc = foreign.malloc;
                var free = foreign.free;
                function inc(i) {
                    i = i | 0;
                    var __00__ = 0;
                    var k = 0;
                    k = i + 1 | 0;
                    return k | 0;
                }
                function fib(x) {
                    x = x | 0;
                    var __01__ = 0, __02__ = 0;
                    var result = 0;
                    var f1 = 0;
                    var f2 = 0;
                    var x1 = 0;
                    var x2 = 0;
                    var b = 0;
                    __01__ = 2 | 0;
                    __02__ = x | 0;
                    b = __02__ < __01__ | 0;
                    if (b | 0) {
                        result = 1 | 0;
                    }
                    else {
                        x1 = x - 1 | 0;
                        x2 = x - 2 | 0;
                        f2 = fib(x2) | 0;
                        f1 = fib(x1) | 0;
                        result = f1 + f2 | 0;
                    }
                    return result | 0;
                }
                function fibz(x) {
                    x = x | 0;
                    var __01__ = 0, __02__ = 0;
                    var result = 0;
                    var f1 = 0;
                    var f2 = 0;
                    var x1 = 0;
                    var x2 = 0;
                    var b = 0;
                    var i = 0;
                    var a = 0;
                    var v1 = 0;
                    var v2 = 0;
                    var v3 = 0;
                    var v4 = 0;
                    var v5 = 0;
                    __01__ = 2 | 0;
                    __02__ = x | 0;
                    b = __02__ < __01__ | 0;
                    if (b | 0) {
                        result = 1 | 0;
                    }
                    else {
                        i = 1;
                        a = x;
                        while (1) {
                            v1 = i - 1 | 0;
                            v2 = fibz(v1) | 0;
                            v3 = i - 2 | 0;
                            v4 = v2 + a | 0;
                            v5 = v3 < 2 | 0;
                            if (v5) {
                                result = v4;
                                return result | 0;
                            }
                            else {
                                a = v4;
                                i = v3;
                            }
                        }
                    }
                    return result | 0;
                }
                return {
                    fib: fib,
                    fibz: fibz,
                };
            }(stdlib_3.default, ffi_5.default, ffi_6.buffer)));
            for (var k in unit) {
                ffi_5.default['unit_' + k] = unit[k];
            }
        }
    }
});
System.register("mt19937", ["ffi", "stdlib"], function(exports_6, context_6) {
    "use strict";
    var __moduleName = context_6 && context_6.id;
    var ffi_7, ffi_8, stdlib_4;
    var mt19937;
    return {
        setters:[
            function (ffi_7_1) {
                ffi_7 = ffi_7_1;
                ffi_8 = ffi_7_1;
            },
            function (stdlib_4_1) {
                stdlib_4 = stdlib_4_1;
            }],
        execute: function() {
            exports_6("mt19937", mt19937 = (function (stdlib, foreign, heap) {
                "use asm";
                var HEAP = new stdlib.Uint32Array(heap);
                var malloc = foreign.malloc;
                var imul = stdlib.Math.imul;
                var N = 624;
                var M = 397;
                var MATRIX_A = 0x9908b0df; /* constant vector a */
                var UPPER_MASK = 0x80000000; /* most significant w-r bits */
                var LOWER_MASK = 0x7fffffff; /* least significant r bits */
                var mt = 0; /* ptr -> the array for the state vector  */
                var mti = 625; /* mti==N+1 means mt[N] is not initialized */
                var T = 0;
                /* initializes mt[N] with a seed */
                function init_genrand(s) {
                    s = s | 0;
                    var r1 = 0.0;
                    var r2 = 0.0;
                    var r3 = 0.0;
                    var r4 = 0.0;
                    var t2 = 0;
                    var t3 = 0;
                    var t4 = 0;
                    var $0 = 0;
                    var $1 = 0;
                    var $2 = 0;
                    var $3 = 0;
                    r1 = +1812433253;
                    mt = malloc(N << 3) | 0; // malloc(N*sizeof(int))
                    $0 = mt << 2;
                    HEAP[mt >> 2] = s & 0xffffffff;
                    for (mti = 1; (mti | 0) < (N | 0); mti = mti + 1 | 0) {
                        $0 = (mt + mti - 1) << 2;
                        r2 = +(HEAP[$0 >> 2] ^ (HEAP[$0 >> 2] >> 30));
                        t2 = ~~(r2);
                        // if (mti<6) console.log('t2 = ', t2);
                        r3 = r1 * r2;
                        t3 = ~~(r3);
                        $0 = (mt + mti) << 2;
                        HEAP[$0 >> 2] = (t3 + mti) | 0; //t3 + mti | 0;
                        t4 = HEAP[$0 >> 2] | 0;
                    }
                }
                /* generates a random number on [0,0xffffffff]-interval */
                function genrand_int32() {
                    var y = 0;
                    var mag01 = 0;
                    var kk = 0;
                    var $0 = 0;
                    var $1 = 0;
                    var $2 = 0;
                    var $3 = 0;
                    mag01 = malloc(2 << 3) | 0;
                    $0 = mag01 << 2;
                    HEAP[$0 >> 2] = 0;
                    $0 = (mag01 + 1) << 2;
                    HEAP[$0 >> 2] = MATRIX_A;
                    if ((mti | 0) >= (N | 0)) {
                        if ((mti | 0) == (N + 1 | 0))
                            init_genrand(5489); /* a default initial seed is used */
                        //console.log('rand ', HEAP[mt+1])
                        T = 0;
                        // for (kk=0;kk<N-M;kk++) {
                        //     y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
                        //     //if (T++<5) console.log(y)
                        //     mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
                        // }
                        for (kk = 0; (kk | 0) < (N - M | 0); kk = kk + 1 | 0) {
                            $0 = (mt + kk) << 2;
                            $1 = (mt + kk + 1) << 2;
                            y = (HEAP[$0 >> 2] & UPPER_MASK) | (HEAP[$1 >> 2] & LOWER_MASK);
                            //if (T++<5) console.log('y', y, kk, HEAP[mt+kk], HEAP[mt+kk+1])
                            $1 = (mt + kk + M) << 2;
                            $2 = (mag01 + (y & 1)) << 2;
                            HEAP[$0 >> 2] = HEAP[$1 >> 2] ^ (y >> 1) ^ HEAP[$2 >> 2];
                        }
                        for (; (kk | 0) < (N - 1 | 0); kk = kk + 1 | 0) {
                            $0 = (mt + kk) << 2;
                            $1 = (mt + kk + 1) << 2;
                            y = (HEAP[$0 >> 2] & UPPER_MASK) | (HEAP[$1 >> 2] & LOWER_MASK);
                            $1 = (mt + kk + M - N) << 2;
                            $2 = (mag01 + (y & 1)) << 2;
                            HEAP[$0 >> 2] = HEAP[$1 >> 2] ^ (y >> 1) ^ HEAP[$2 >> 2];
                        }
                        $0 = (mt + N - 1) << 2;
                        $1 = mt >> 2;
                        $2 = (mt + M - 1) >> 2;
                        $3 = (mag01 + (y & 1)) >> 2;
                        y = (HEAP[$0 >> 2] & UPPER_MASK) | (HEAP[$1 >> 2] & LOWER_MASK);
                        HEAP[$0 >> 2] = HEAP[$2 >> 2] ^ (y >> 1) ^ HEAP[$3 >> 2];
                        mti = 0;
                    }
                    $0 = (mt + mti) << 2;
                    y = HEAP[$0 >> 2] | 0;
                    mti = mti + 1 | 0;
                    /* Tempering */
                    y = y ^ (y >> 11);
                    y = y ^ (y << 7) & 0x9d2c5680;
                    y = y ^ (y << 15) & 0xefc60000;
                    y = y ^ (y >> 18);
                    return y | 0;
                }
                return {
                    genrand_int32: genrand_int32,
                };
            }(stdlib_4.default, ffi_7.default, ffi_8.buffer)));
        }
    }
});
// Generated by CoffeeScript 1.10.0
/*
 * Run tests
 */
var fib, fiby, fibz;
fib = function (x) {
    if (x < 2) {
        return 1;
    }
    else {
        return fib(x - 1) + fib(x - 2);
    }
};
fibz = function (n) {
    var i, j, ref, x, y, z;
    x = 0;
    y = 1;
    z = 1;
    for (i = j = 0, ref = n; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        x = y;
        y = z;
        z = x + y;
    }
    return x;
};
fiby = function (x) {
    var a, v, v1, v2, v3, v4, v5;
    if (x < 2) {
        return 1;
    }
    else {
        a = 1;
        v = x;
        while (1) {
            v1 = v - 1;
            v2 = fiby(v1);
            v3 = v - 2;
            v4 = v2 + a;
            v5 = v3 < 2;
            if (v5) {
                return v4;
            }
            else {
                a = v4;
                v = v3;
            }
        }
    }
};
Promise.all(['unit'].map(function (x) {
    return System["import"](x);
})).then(function (arg) {
    var unit;
    unit = arg[0].unit;
    return describe('Smoke Tests', function () {
        it('Hello', function () {
            return expect(0).to.equal(0);
        });
        it('Fib1', function () {
            return expect(fib(45)).to.equal(1836311903);
        });
        return it('Fib2', function () {
            return expect(fibz(45)).to.equal(1836311903);
        });
    });
}, function (err) {
    return console.log(err);
});
