// Generated by CoffeeScript 1.10.0
System.register("stdlib", [], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var Stdlib;
    return {
        setters:[],
        execute: function() {
            /*
            ## Stdlib
             */
            Stdlib = (function () {
                function Stdlib() { }
                Stdlib.Math = Math;
                Stdlib.Int8Array = Int8Array;
                Stdlib.Int16Array = Int16Array;
                Stdlib.Int32Array = Int32Array;
                Stdlib.Uint8Array = Uint8Array;
                Stdlib.Uint16Array = Uint16Array;
                Stdlib.Uint32Array = Uint32Array;
                Stdlib.Float32Array = Float32Array;
                Stdlib.Float64Array = Float64Array;
                Stdlib.NaN = NaN;
                Stdlib.Infinity = Infinity;
                return Stdlib;
            })();
            exports_1("default",Stdlib);
        }
    }
});
// Generated by CoffeeScript 1.10.0
System.register("ffi", [], function(exports_2, context_2) {
    "use strict";
    var __moduleName = context_2 && context_2.id;
    var Ffi, HEAP, HEAP_SIZE, allocator, buffer, foreign, bufferMax;
    return {
        setters:[],
        execute: function() {
            /*
            ## Foreign function interface
             */
            HEAP_SIZE = 0x40000;
            Ffi = (function () {
                function Ffi() { }
                Ffi.now = function () {
                    return performance.now();
                };
                /*
                 * malloc
                 *
                 * @param nBytes number of bytes required
                 * @returns starting offset in the heap
                 */
                Ffi.malloc = function (nBytes) {
                    var offset;
                    if (typeof malloc !== "undefined" && malloc !== null) {
                        return allocator.alloc(nBytes);
                    }
                    else {
                        /*
                        * Fallback:
                        * this is a naive implementation of malloc.
                        * memory is only allocated, never freed.
                         */
                        offset = HEAP[0];
                        HEAP[0] = offset + nBytes;
                        return offset;
                    }
                };
                Ffi.free = function (addr) {
                    if (typeof malloc !== "undefined" && malloc !== null) {
                        return allocator.free(addr);
                    }
                };
                return Ffi;
            })();
            exports_2("default",Ffi);
            exports_2("buffer", buffer = new ArrayBuffer(HEAP_SIZE));
            exports_2("foreign", foreign = Ffi);
            exports_2("bufferMax", bufferMax = HEAP_SIZE);
            if (typeof malloc !== "undefined" && malloc !== null) {
                allocator = new malloc.Allocator(buffer);
            }
            else {
                HEAP = new Int32Array(buffer);
                HEAP[0] = 16;
            }
        }
    }
});
System.register("test1", ["ffi", "stdlib"], function(exports_3, context_3) {
    "use strict";
    var __moduleName = context_3 && context_3.id;
    var ffi_1, ffi_2, stdlib_1;
    var test1;
    return {
        setters:[
            function (ffi_1_1) {
                ffi_1 = ffi_1_1;
                ffi_2 = ffi_1_1;
            },
            function (stdlib_1_1) {
                stdlib_1 = stdlib_1_1;
            }],
        execute: function() {
            exports_3("test1", test1 = (function (stdlib, foreign, heap) {
                "use asm";
                var HEAPI32 = new stdlib.Int32Array(heap);
                var malloc = foreign.malloc;
                var buf = 0;
                function factorial(n) {
                    n = n | 0;
                    var __00__ = 0;
                    var i = 0;
                    var result = 0;
                    result = 0;
                    for (i = 0; (i | 0) < (n | 0); i = i + 1 | 0) {
                        result = result + i | 0;
                    }
                    return result | 0;
                }
                function alloc(n) {
                    n = n | 0;
                    var __00__ = 0;
                    buf = (malloc(n << 2) | 0) >> 2;
                    return buf | 0;
                }
                function values(i) {
                    i = i | 0;
                    var __01__ = 0, __02__ = 0;
                    var value = 0;
                    var k = 0;
                    var result = 0;
                    value = (malloc(10 << 2) | 0) >> 2;
                    HEAPI32[(value + 0) << 2 >> 2] = 42;
                    HEAPI32[(value + 1) << 2 >> 2] = 43;
                    HEAPI32[(value + 2) << 2 >> 2] = 44;
                    HEAPI32[(value + 3) << 2 >> 2] = 45;
                    HEAPI32[(value + 4) << 2 >> 2] = 46;
                    HEAPI32[(value + 5) << 2 >> 2] = 47;
                    HEAPI32[(value + 6) << 2 >> 2] = 48;
                    HEAPI32[(value + 7) << 2 >> 2] = 49;
                    HEAPI32[(value + 8) << 2 >> 2] = 50;
                    HEAPI32[(value + 9) << 2 >> 2] = 51;
                    __01__ = value + i | 0;
                    __02__ = __01__ << 2;
                    result = HEAPI32[__02__ >> 2] | 0;
                    return value | 0;
                }
                return {
                    factorial: factorial,
                    alloc: alloc,
                    values: values,
                };
            }(stdlib_1.default, ffi_1.default, ffi_2.buffer)));
        }
    }
});
System.register("test2", ["ffi", "stdlib"], function(exports_4, context_4) {
    "use strict";
    var __moduleName = context_4 && context_4.id;
    var ffi_3, ffi_4, stdlib_2;
    var test2;
    return {
        setters:[
            function (ffi_3_1) {
                ffi_3 = ffi_3_1;
                ffi_4 = ffi_3_1;
            },
            function (stdlib_2_1) {
                stdlib_2 = stdlib_2_1;
            }],
        execute: function() {
            exports_4("test2", test2 = (function (stdlib, foreign, heap) {
                "use asm";
                var HEAPI32 = new stdlib.Int32Array(heap);
                var malloc = foreign.malloc;
                function index(ptr, i) {
                    ptr = ptr | 0;
                    i = i | 0;
                    var __01__ = 0, __02__ = 0;
                    var x = 0.0;
                    var value = 0;
                    var k = 0;
                    var result = 0;
                    value = ptr;
                    __01__ = value + i | 0;
                    __02__ = __01__ << 2;
                    result = HEAPI32[__02__ >> 2] | 0;
                    return result | 0;
                }
                function and(s) {
                    s = s | 0;
                    var __01__ = 0, __02__ = 0, __03__ = 0, __04__ = 0, __05__ = 0;
                    var m = 0;
                    var x = 0;
                    m = (malloc(10 << 2) | 0) >> 2;
                    __01__ = m + 0 | 0;
                    __02__ = __01__ << 2;
                    __03__ = s & 4294967295;
                    HEAPI32[__02__ >> 2] = __03__ | 0;
                    __04__ = m + 0 | 0;
                    __05__ = __04__ << 2;
                    x = HEAPI32[__05__ >> 2] | 0;
                    return x | 0;
                }
                function test() {
                    var __00__ = 0;
                    var zz = 0;
                    zz = ~~(20);
                    return zz | 0;
                }
                return {
                    index: index,
                    and: and,
                    test: test,
                };
            }(stdlib_2.default, ffi_3.default, ffi_4.buffer)));
        }
    }
});
// Generated by CoffeeScript 1.10.0
/*
 * Run tests
 *
Promise.all(['test1', 'test2', 'test-twister', 'mt19937'].map((x) ->
  System.import(x))).then ([{test1}, {test2}, {MersenneTwister}, {mt19937}]) ->
 */
Promise.all(['test1', 'test2'].map(function (x) {
    return System["import"](x);
})).then(function (arg) {
    var ref, ref1, test1, test2;
    (ref = arg[0], test1 = ref.test1), (ref1 = arg[1], test2 = ref1.test2);
    return describe('Basic Tests', function () {
        it('Factorial', function () {
            expect(test1.factorial(10)).to.equal(45);
        });
        it('Alloc', function () {
            expect(test1.alloc(10)).to.equal(typeof malloc !== "undefined" && malloc !== null ? 68 : 4);
            expect(test1.alloc(10)).to.equal(typeof malloc !== "undefined" && malloc !== null ? 80 : 14);
        });
        it('List', function () {
            expect(test1.values()).to.equal(typeof malloc !== "undefined" && malloc !== null ? 92 : 24);
            expect(test2.index((typeof malloc !== "undefined" && malloc !== null ? 92 : 24), 2)).to.equal(44);
        });
        return it('And', function () {
            return expect(test2.and(42)).to.equal(42);
        });
    });
}, function (err) {
    return console.log(err);
});
